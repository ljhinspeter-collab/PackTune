import React, { useState, useMemo, useContext } from 'react';
import type { CollectedSong, User } from '../types';
import { Rarity } from '../types';
import { getRarityStyles } from '../utils/rarity';
import { SearchBar } from '../components/SearchBar';
import { SongPreviewModal } from '../components/SongPreviewModal';
import { UserContext } from '../contexts/UserContext';
import { RarityFilter } from '../components/RarityFilter';

const ProfileEditModal: React.FC<{ user: User, onSave: (data: Partial<User>) => void, onClose: () => void }> = ({ user, onSave, onClose }) => {
    const [name, setName] = useState(user.name);
    const [bio, setBio] = useState(user.bio);
    const [pfpUrl, setPfpUrl] = useState(user.pfpUrl);

    const handleSave = () => {
        onSave({ name, bio, pfpUrl });
        onClose();
    };

    return (
        <div className="modal-overlay" onClick={onClose}>
            <div className="modal-content w-full max-w-md bg-gray-800 rounded-lg p-6" onClick={e => e.stopPropagation()}>
                <h3 className="text-2xl font-bold mb-4">Edit Profile</h3>
                <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-300 mb-1">Name</label>
                        <input type="text" value={name} onChange={e => setName(e.target.value)} className="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 focus:ring-indigo-500 focus:border-indigo-500" />
                    </div>
                     <div>
                        <label className="block text-sm font-medium text-gray-300 mb-1">Bio</label>
                        <textarea value={bio} onChange={e => setBio(e.target.value)} className="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 focus:ring-indigo-500 focus:border-indigo-500" rows={2}></textarea>
                    </div>
                     <div>
                        <label className="block text-sm font-medium text-gray-300 mb-1">Profile Picture URL</label>
                        <input type="text" value={pfpUrl} onChange={e => setPfpUrl(e.target.value)} className="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 focus:ring-indigo-500 focus:border-indigo-500" />
                    </div>
                </div>
                <div className="flex justify-end gap-3 mt-6">
                    <button onClick={onClose} className="px-4 py-2 bg-gray-600 hover:bg-gray-500 rounded-md">Cancel</button>
                    <button onClick={handleSave} className="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-md">Save</button>
                </div>
            </div>
        </div>
    );
};


const CollectedSongCard: React.FC<{ collectedSong: CollectedSong, onClick: () => void }> = ({ collectedSong, onClick }) => {
  const { song } = collectedSong;
  const rarityStyles = getRarityStyles(song.rarity);
  const isMythic = song.rarity === Rarity.Mythic;
  const isShiny = song.isShiny;

  return (
    <button 
      onClick={onClick} 
      className={`p-2 rounded-lg border flex flex-col h-full transition-all duration-300 text-left w-full focus:outline-none focus:ring-2 focus:ring-indigo-500 ${isMythic ? 'mythic-border mythic-glow' : `bg-gray-800/50 ${rarityStyles.borderColor} hover:border-indigo-400`} ${isShiny && !isMythic ? 'shadow-lg shadow-cyan-500/40' : ''}`}>
      <div className="relative">
        <img src={collectedSong.song.albumArtUrl} alt={collectedSong.song.album} className="w-full h-auto aspect-square rounded-md object-cover mb-2"/>
         {isShiny && <div className="absolute inset-0 rounded-md holographic"></div>}
      </div>
      <div className="flex-grow truncate">
        <p className={`font-semibold text-white truncate ${isMythic ? rarityStyles.textGradient : ''}`}>{collectedSong.song.title}</p>
        <p className="text-sm text-gray-400 truncate">{collectedSong.song.artist}</p>
      </div>
      <div className="flex justify-between items-center mt-2 pt-2 border-t border-white/10">
        <span className={`text-xs font-bold ${rarityStyles.textColor}`}>{collectedSong.song.rarity} {isShiny && 'âœ¨'}</span>
        {isMythic && collectedSong.serialNumber && (
           <span className="bg-yellow-400/80 text-black text-xs font-bold px-2 py-0.5 rounded-full">#{String(collectedSong.serialNumber).padStart(3, '0')}</span>
        )}
      </div>
    </button>
  );
};

export const CollectionView: React.FC<{ user: User }> = ({ user }) => {
  const [query, setQuery] = useState('');
  const [selectedSong, setSelectedSong] = useState<CollectedSong | null>(null);
  const [rarityFilter, setRarityFilter] = useState<Rarity | 'All'>('All');
  const [isEditingProfile, setIsEditingProfile] = useState(false);
  const userContext = useContext(UserContext);
  const isCurrentUser = userContext?.currentUser?.id === user.id;

  const filteredSongs = useMemo(() => {
    let songs = user.collection;
    if (rarityFilter !== 'All') {
      songs = songs.filter(item => item.song.rarity === rarityFilter);
    }
    if (query.trim()) {
      const lowerCaseQuery = query.toLowerCase();
      songs = songs.filter(
        (item) =>
          item.song.title.toLowerCase().includes(lowerCaseQuery) ||
          item.song.artist.toLowerCase().includes(lowerCaseQuery)
      );
    }
    return songs;
  }, [query, user.collection, rarityFilter]);

  return (
    <div>
      <div className="flex flex-col md:flex-row items-center gap-6 mb-8 bg-gray-800/50 p-6 rounded-lg border border-gray-700">
        <img src={user.pfpUrl} alt={user.name} className="w-24 h-24 rounded-full object-cover border-4 border-gray-600"/>
        <div className="flex-grow text-center md:text-left">
          <h2 className="text-3xl font-bold">{user.name}</h2>
          <p className="text-gray-400 mt-1">{user.bio}</p>
        </div>
        {isCurrentUser && (
            <button onClick={() => setIsEditingProfile(true)} className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-md font-semibold transition-colors">
                Edit Profile
            </button>
        )}
      </div>

      <div className="max-w-lg mx-auto mb-4">
        <SearchBar query={query} setQuery={setQuery} onSearch={() => {}} isLoading={false} placeholder="Search your collection..."/>
      </div>

      <RarityFilter activeFilter={rarityFilter} setFilter={setRarityFilter} />
      
      {user.collection.length === 0 ? (
        <div className="text-center text-gray-400 py-16">
          <p className="text-lg">This collection is empty.</p>
          {isCurrentUser && <p className="mt-1">Go to the 'Packs' tab to get some songs!</p>}
        </div>
      ) : filteredSongs.length === 0 ? (
         <div className="text-center text-gray-400 py-16">
          <p className="text-lg">No songs match your filters.</p>
        </div>
      ) : (
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
          {filteredSongs.map(song => (
            <CollectedSongCard key={song.id} collectedSong={song} onClick={() => setSelectedSong(song)} />
          ))}
        </div>
      )}
      
      {selectedSong && (
        <SongPreviewModal
            collectedSong={selectedSong}
            onClose={() => setSelectedSong(null)}
            showTradeButton={isCurrentUser}
        />
      )}
      {isEditingProfile && isCurrentUser && userContext && (
        <ProfileEditModal
            user={user}
            onClose={() => setIsEditingProfile(false)}
            onSave={userContext.updateCurrentUser}
        />
      )}
    </div>
  );
};