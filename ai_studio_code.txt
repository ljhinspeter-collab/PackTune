import React, { useState, useContext, useMemo } from 'react';
import { UserContext } from '../contexts/UserContext';
import type { User } from '../types';
import { CollectionView } from './CollectionView';
import { SearchBar } from '../components/SearchBar';

const UserCard: React.FC<{ 
    user: User; 
    isFriend: boolean;
    onAdd: () => void;
    onRemove: () => void;
    onView: () => void;
    isCurrentUser: boolean;
}> = ({ user, isFriend, onAdd, onRemove, onView, isCurrentUser }) => (
    <div className="flex items-center p-3 bg-gray-800 rounded-lg border border-gray-700">
        <img src={user.pfpUrl} alt={user.name} className="w-12 h-12 rounded-full object-cover"/>
        <div className="ml-4">
            <p className="font-semibold">{user.name} {isCurrentUser && <span className="text-xs text-indigo-400">(You)</span>}</p>
            <p className="text-sm text-gray-400">{user.bio}</p>
        </div>
        <div className="ml-auto flex gap-2">
             <button onClick={onView} className="px-3 py-1.5 bg-gray-600 hover:bg-gray-500 text-white text-sm font-semibold rounded-md transition-colors">
                View Collection
            </button>
            {!isCurrentUser && (
                isFriend ? (
                    <button onClick={onRemove} className="px-3 py-1.5 bg-red-600 hover:bg-red-500 text-white text-sm font-semibold rounded-md transition-colors">
                        Remove
                    </button>
                ) : (
                    <button onClick={onAdd} className="px-3 py-1.5 bg-green-600 hover:bg-green-500 text-white text-sm font-semibold rounded-md transition-colors">
                        Add Friend
                    </button>
                )
            )}
        </div>
    </div>
);


export const FriendsView: React.FC = () => {
    const { currentUser, users, addFriend, removeFriend } = useContext(UserContext)!;
    const [selectedUser, setSelectedUser] = useState<User | null>(null);
    const [userSearchQuery, setUserSearchQuery] = useState('');

    if (selectedUser) {
        return (
            <div>
                <button onClick={() => setSelectedUser(null)} className="mb-4 px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-md">&larr; Back to Friends List</button>
                <CollectionView user={selectedUser} />
            </div>
        )
    }

    const friends = useMemo(() => users.filter(u => currentUser!.friendIds.includes(u.id)), [users, currentUser]);
    
    const allOtherUsers = useMemo(() => 
        users.filter(u => !currentUser!.friendIds.includes(u.id) && u.id !== currentUser!.id), 
        [users, currentUser]
    );

    const filteredOtherUsers = useMemo(() => {
        if (!userSearchQuery.trim()) {
            return allOtherUsers;
        }
        return allOtherUsers.filter(u => u.name.toLowerCase().includes(userSearchQuery.toLowerCase()));
    }, [allOtherUsers, userSearchQuery]);


    return (
        <div>
            <h2 className="text-3xl font-bold mb-6 text-center">Friends & Users</h2>
            <div className="max-w-3xl mx-auto space-y-8">
                <div>
                    <h3 className="text-xl font-semibold mb-4 text-white">Your Friends ({friends.length})</h3>
                    <div className="space-y-3">
                        {friends.length > 0 ? friends.map(friend => (
                            <UserCard 
                                key={friend.id} 
                                user={friend} 
                                isFriend={true}
                                onRemove={() => removeFriend(friend.id)}
                                onAdd={() => {}}
                                onView={() => setSelectedUser(friend)}
                                isCurrentUser={false}
                            />
                        )) : <p className="text-gray-400">You haven't added any friends yet.</p>}
                    </div>
                </div>

                <div>
                    <h3 className="text-xl font-semibold mb-4 text-white">Find Users</h3>
                     <div className="mb-4">
                        <SearchBar
                            query={userSearchQuery}
                            setQuery={setUserSearchQuery}
                            onSearch={() => {}}
                            isLoading={false}
                            placeholder="Search for other users..."
                        />
                     </div>
                    <div className="space-y-3">
                        {users.filter(u => u.id !== currentUser!.id).length === 0 ? (
                             <p className="text-center text-gray-400 py-10 border-2 border-dashed border-gray-700 rounded-lg">No other users found. Invite your friends to join!</p>
                        ) : filteredOtherUsers.length > 0 ? (
                            filteredOtherUsers.map(user => (
                                <UserCard 
                                    key={user.id} 
                                    user={user} 
                                    isFriend={false}
                                    onAdd={() => addFriend(user.id)}
                                    onRemove={() => {}}
                                    onView={() => setSelectedUser(user)}
                                    isCurrentUser={false}
                                />
                            ))
                        ) : (
                             <p className="text-center text-gray-400 py-10">No users match your search.</p>
                        )}
                    </div>
                </div>

            </div>
        </div>
    );
};