import React, { useState, useEffect, useContext } from 'react';
import { searchSongs } from '../services/musicService';
import type { Song } from '../types';
import { Rarity } from '../types';
import { getRarityStyles } from '../utils/rarity';
import { UserContext } from '../contexts/UserContext';

const PackRevealCard: React.FC<{ song: Song }> = ({ song }) => {
    const rarityStyles = getRarityStyles(song.rarity);
    const isMythic = song.rarity === Rarity.Mythic;
    const isShiny = song.isShiny;
    
    return (
        <div
            className={`w-full max-w-sm h-[500px] p-4 rounded-xl shadow-2xl flex flex-col justify-between relative select-none overflow-hidden transition-opacity duration-300 ${isMythic ? 'mythic-border bg-gray-900' : `bg-gray-800 border ${rarityStyles.borderColor}`} ${isShiny ? 'mythic-glow' : ''}`}
        >
            <div className="absolute top-4 left-4 flex gap-2 z-10">
                {isMythic && (
                    <div className="bg-yellow-400 text-black text-sm font-bold px-3 py-1 rounded-full shadow-md">MYTHIC</div>
                )}
                {isShiny && (
                    <div className="bg-gradient-to-r from-cyan-400 to-blue-500 text-white text-sm font-bold px-3 py-1 rounded-full shadow-md animate-pulse">SHINY</div>
                )}
            </div>
            <div className="text-center pt-8">
                <p className={`font-bold text-2xl truncate ${isMythic ? rarityStyles.textGradient : 'text-white'}`}>{song.title}</p>
                <p className="text-gray-300 text-lg">{song.artist}</p>
            </div>
            <div className="relative w-64 h-64 mx-auto my-4">
              <img src={song.albumArtUrl} crossOrigin="anonymous" alt={song.album} className={`w-full h-full rounded-lg object-cover shadow-lg `} />
               {isShiny && <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-lg holographic"></div>}
            </div>
            <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
                <span className={`text-xl font-bold ${rarityStyles.textColor}`}>{song.rarity}</span>
                {song.releaseDate && <span className="text-sm text-gray-400">{new Date(song.releaseDate).toLocaleDateString()}</span>}
            </div>
        </div>
    );
};

export const PacksView: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [packSongs, setPackSongs] = useState<Song[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [lastCollected, setLastCollected] = useState<string | null>(null);
  const [isRevealing, setIsRevealing] = useState(false);
  
  const userContext = useContext(UserContext);
  const { currentUser, addSongsToCollection } = userContext!;

  useEffect(() => {
    if (packSongs.length > 0) {
      setIsRevealing(true);
    }
  }, [packSongs]);
  
  const openPack = async () => {
    setIsLoading(true);
    setError(null);
    setPackSongs([]);
    setCurrentIndex(0);
    setIsRevealing(false);
    try {
      // Pass an empty query to get random songs and the favorites list for the boost
      const songs = await searchSongs('', currentUser?.favoriteArtists || []);
      if (songs.length < 5) {
        setError('Could not find enough songs for a full pack. The universe is sparse today.');
      } else {
        setPackSongs(songs);
      }
    } catch (e: any) {
      setError(e.message || 'An error occurred while opening the pack.');
    }
    setIsLoading(false);
  };
  
  const handleNextSong = () => {
      if (currentIndex >= packSongs.length) return;
      
      const songToCollect = packSongs[currentIndex];
      addSongsToCollection([songToCollect]);
      setLastCollected(songToCollect.title);
      
      setTimeout(() => setLastCollected(null), 2000);
      
      setIsRevealing(false);

      setTimeout(() => {
        if (currentIndex === packSongs.length - 1) {
            // Last song, reset
            setPackSongs([]);
            setCurrentIndex(0);
        } else {
            setCurrentIndex(prev => prev + 1);
            setIsRevealing(true);
        }
      }, 300); // Wait for fade out animation
  };

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="text-center">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-400"></div>
            <p className="mt-4 text-gray-400 text-lg">Contacting the musical cosmos...</p>
        </div>
      );
    }

    if (error) {
       return (
        <div className="text-center">
            <p className="text-red-400 mb-4">{error}</p>
            <button onClick={openPack} className="px-4 py-2 bg-indigo-600 rounded-md">Try Again</button>
        </div>
       );
    }

    if (packSongs.length > 0) {
      const currentSong = packSongs[currentIndex];
      const isLastSong = currentIndex === packSongs.length - 1;
      return (
        <div className={`flex flex-col items-center justify-center transition-opacity duration-300 ${isRevealing ? 'opacity-100' : 'opacity-0'}`}>
          <PackRevealCard key={currentSong.id} song={currentSong} />
          <p className="mt-4 text-gray-400 font-bold">{currentIndex + 1} / {packSongs.length}</p>
          <button onClick={handleNextSong} className="mt-4 px-8 py-3 bg-green-600 hover:bg-green-500 text-white font-bold rounded-lg text-lg transition-colors">
            {isLastSong ? 'Finish & Collect' : 'Collect & Next'}
          </button>
        </div>
      );
    }

    return (
      <div className="text-center flex flex-col items-center justify-center">
        <h2 className="text-3xl font-bold mb-4">The Infinity Pack</h2>
        <p className="text-gray-400 mb-8 max-w-md">Tap the pack to open it and discover 5 random songs. Add artists to your Favorites for a chance to find them here!</p>
        <button
          onClick={openPack}
          disabled={isLoading}
          className="w-64 h-64 bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 rounded-2xl shadow-2xl flex items-center justify-center text-white font-bold text-2xl transition-transform hover:scale-105 active:scale-100 disabled:bg-gray-500 disabled:cursor-not-allowed"
        >
          OPEN
        </button>
      </div>
    );
  };


  return (
    <div className="relative min-h-[calc(100vh-240px)] flex items-center justify-center">
      {lastCollected && (
        <div className="absolute top-0 left-1/2 -translate-x-1/2 bg-green-500/80 text-white px-4 py-2 rounded-lg z-10 animate-pulse">
            Added "{lastCollected}" to your collection!
        </div>
      )}
      {renderContent()}
    </div>
  );
};